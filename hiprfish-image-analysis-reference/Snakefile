###############################################################################################################
# HiPR-FISH : simulation of probe coverage with different design parameters
###############################################################################################################
import pandas as pd
import re
import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'
###############################################################################################################
# Helper functions
###############################################################################################################

def get_output_summary_filename(input_image_list):
    output_summary_filename = re.sub('.csv', '_results.csv', input_image_list)
    return(output_summary_filename)

def get_output_spectra_list(image_tab, data_dir):
    output_spectra_list = ['{}/{}/{}_avgint_norm.csv'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(output_spectra_list)

def get_cell_ids_list(image_tab, data_dir):
    cell_ids_list = ['{}/{}/{}_cell_ids.txt'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(cell_ids_list)

def get_identification_list(image_tab, data_dir):
    identification_list = ['{}/{}/{}_identification.png'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(identification_list)

def get_classification_complete_list(image_tab, data_dir):
    classification_complete_list = ['{}/{}/{}_classification_complete.txt'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(classification_complete_list)

def get_channel_image_filenames(folder, sample, data_dir):
    excitations = ['405', '488', '514', '561', '633']
    channel_image_filenames = ['{}/{}/{}_{}.czi'.format(data_dir, folder, sample, exc) for exc in excitations]
    return(channel_image_filenames)

def get_calibration_toggle(image_tab, sample):
    return(image_tab.loc[image_tab.IMAGES.values == sample].CALIBRATION.values[0])

def get_calibration_filename(image_tab, sample):
    return('{}/{}'.format(data_dir, image_tab.loc[image_tab.IMAGES.values == sample].CALIBRATION_FILENAME.values[0]))

def get_reference_toggle(image_tab, sample):
    return(image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE.values[0])

def get_reference_clf(image_tab, sample):
    ref_folder = image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE_FOLDER.values[0]
    ref_type = image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE_TYPE.values[0]
    ref_normalization = image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE_NORMALIZATION.values[0]
    ref_scope = image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE_SCOPE.values[0]
    spc = image_tab.loc[image_tab.IMAGES.values == sample].SPC.values[0]
    ref_umap = image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE_UMAP.values[0]
    if ref_scope == 'Select':
        mix_id = int(re.sub('mix_', '', re.search('mix_[0-9]*', image_tab.loc[image_tab.IMAGES.values == sample].INPUT_TAB_FILENAME.values[0]).group(0)))
    if ref_type == 'A':
        ref_clf = '{}/{}/reference_all.pkl'.format(data_dir, ref_folder)
    elif ref_normalization == 'T':
        if ref_scope == 'Select':
            ref_clf = '{}/{}/reference_simulate_select_mix_{}_{}_normalized_umap_transform.pkl'.format(data_dir, ref_folder, mix_id, spc)
        else:
            if ref_umap == 'T':
                ref_clf = '{}/{}/reference_simulate_{}_excitation_adjusted_normalized_violet_derivative_umap_transform.pkl'.format(data_dir, ref_folder, spc)
            else:
                ref_clf = '{}/{}/reference_simulate_{}_normalized_excitation_adjusted.pkl'.format(data_dir, ref_folder, spc)
    else:
        if ref_scope == 'Select':
            ref_clf = '{}/{}/reference_simulate_select_mix_{}_{}.pkl'.format(data_dir, ref_folder, mix_id, spc)
        else:
            ref_clf = '{}/{}/reference_simulate_{}.pkl'.format(data_dir, ref_folder, spc)
    return(ref_clf)

def get_reference_umap(image_tab, sample):
    ref_umap = image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE_UMAP.values[0]
    return(ref_umap)

def get_reference_normalization(image_tab, sample):
    ref_scale = image_tab.loc[image_tab.IMAGES.values == sample].REFERENCE_NORMALIZATION.values[0]
    return(ref_scale)

data_dir = config['__default__']['DATA_DIR']
input_image_list = config['images']['image_list_table']
image_tab = pd.read_csv(input_image_list)
output_spectra_list = get_output_spectra_list(image_tab, data_dir)
cell_ids_list = get_cell_ids_list(image_tab, data_dir)
identification_list = get_identification_list(image_tab, data_dir)
classification_complete_list = get_classification_complete_list(image_tab, data_dir)
output_filename = get_output_summary_filename(input_image_list)

###############################################################################################################
# Snake rules
###############################################################################################################

rule all:
    input:
        output_spectra_list

rule measure_reference_image:
    input:
        image_filenames = lambda wildcards: get_channel_image_filenames(wildcards.folder, wildcards.sample, data_dir)
    output:
        reference_csv = data_dir + '/{folder}/{sample}_avgint.csv',
        reference_norm_csv = data_dir + '/{folder}/{sample}_avgint_norm.csv',
        segmentation_npy = data_dir + '/{folder}/{sample}_seg.npy',
        segmentation_png = data_dir + '/{folder}/{sample}_seg.png'
    params:
        calibration_toggle = lambda wildcards: get_calibration_toggle(image_tab, wildcards.sample),
        calibration_filename = lambda wildcards: get_calibration_filename(image_tab, wildcards.sample),
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_imaging_reference_image_measurement.py "
        "-i {input.image_filenames} "
        "-c {params.calibration_toggle} "
        "-cf {params.calibration_filename}"
